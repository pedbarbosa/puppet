" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2000 Jan 06
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"		for VMS:  sys$login:.vimrc

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

set bs=2		" allow backspacing over everything in insert mode
set ai			" always set autoindenting on
"set backup		" keep a backup file
set viminfo='20,\"50	" read/write a .viminfo file, don't store more
			" than 50 lines of registers
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" Make p in Visual mode replace the selected text with the "" register.
vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
" if &t_Co > 2 || has("gui_running")
"  syntax on
set hlsearch
"endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

 " In text files, always limit the width of text to 78 characters
 autocmd BufRead *.txt set tw=78

 augroup cprog
  " Remove all cprog autocommands
  au!

  " When starting to edit a file:
  "   For C and C++ files set formatting of comments and set C-indenting on.
  "   For other files switch it off.
  "   Don't change the order, it's important that the line with * comes first.
  autocmd FileType *      set formatoptions=tcql nocindent comments&
  autocmd FileType c,cpp  set formatoptions=croql cindent comments=sr:/*,mb:*,el:*/,://
 augroup END

 augroup gzip
  " Remove all gzip autocommands
  au!

  " Enable editing of gzipped files
  " set binary mode before reading the file
  autocmd BufReadPre,FileReadPre	*.gz,*.bz2 set bin
  autocmd BufReadPost,FileReadPost	*.gz call GZIP_read("gunzip")
  autocmd BufReadPost,FileReadPost	*.bz2 call GZIP_read("bunzip2")
  autocmd BufWritePost,FileWritePost	*.gz call GZIP_write("gzip")
  autocmd BufWritePost,FileWritePost	*.bz2 call GZIP_write("bzip2")
  autocmd FileAppendPre			*.gz call GZIP_appre("gunzip")
  autocmd FileAppendPre			*.bz2 call GZIP_appre("bunzip2")
  autocmd FileAppendPost		*.gz call GZIP_write("gzip")
  autocmd FileAppendPost		*.bz2 call GZIP_write("bzip2")

  " After reading compressed file: Uncompress text in buffer with "cmd"
  fun! GZIP_read(cmd)
    " set 'cmdheight' to two, to avoid the hit-return prompt
    let ch_save = &ch
    set ch=3
    " when filtering the whole buffer, it will become empty
    let empty = line("'[") == 1 && line("']") == line("$")
    let tmp = tempname()
    let tmpe = tmp . "." . expand("<afile>:e")
    " write the just read lines to a temp file "'[,']w tmp.gz"
    execute "'[,']w " . tmpe
    " uncompress the temp file "!gunzip tmp.gz"
    execute "!" . a:cmd . " " . tmpe
    " delete the compressed lines
    '[,']d
    " read in the uncompressed lines "'[-1r tmp"
    set nobin
    execute "'[-1r " . tmp
    " if buffer became empty, delete trailing blank line
    if empty
      normal Gdd''
    endif
    " delete the temp file
    call delete(tmp)
    let &ch = ch_save
    " When uncompressed the whole buffer, do autocommands
    if empty
      execute ":doautocmd BufReadPost " . expand("%:r")
    endif
  endfun

  " After writing compressed file: Compress written file with "cmd"
  fun! GZIP_write(cmd)
    if rename(expand("<afile>"), expand("<afile>:r")) == 0
      execute "!" . a:cmd . " <afile>:r"
    endif
  endfun

  " Before appending to compressed file: Uncompress file with "cmd"
  fun! GZIP_appre(cmd)
    execute "!" . a:cmd . " <afile>"
    call rename(expand("<afile>:r"), expand("<afile>"))
  endfun

 augroup END

 " This is disabled, because it changes the jumplist.  Can't use CTRL-O to go
 " back to positions in previous files more than once.
 if 1
  " When editing a file, always jump to the last cursor position.
  " This must be after the uncompress commands.
   autocmd BufReadPost * if line("'\"") && line("'\"") <= line("$") | exe "normal `\"" | endif
 endif

endif " has("autocmd")

set errorformat=%f:%l:%m
set smartindent
set cindent
set showmatch shiftwidth=1 autoindent
syntax on

" ==============
" Colorization
" ==============

"    Normal text:    Use white on black.
" hi normal ctermfg=white ctermbg=black   guifg=white guibg=black
" Oops - this overrides the colors for the status line - DANG!

hi normal       term=NONE
hi statusline   term=NONE cterm=NONE ctermfg=yellow ctermbg=red
hi statuslineNC term=NONE cterm=NONE ctermfg=black  ctermbg=white
hi nontext      term=NONE cterm=NONE ctermfg=blue   ctermbg=black

autocmd FileType /tmp/mutt* set tw=65
"    Search matches: Use white on red.
hi search  ctermfg=white ctermbg=red     guifg=white guibg=red

"    Comments: cyan on white does not look good on a black background..
hi comment ctermbg=black ctermfg=cyan

" colorscheme pablo

" My own filetype
autocmd BufNewFile,BufRead		*.tmpl set filetype=html
" autocmd BufNewFile,BufRead		*.tmpl set filetype=tt2

function! DoPrettyXML()
 " save the filetype so we can restore it later
 let l:origft = &ft
 set ft=
 " delete the xml header if it exists. This will
 " permit us to surround the document with fake tags
 " without creating invalid xml.
 1s/<?xml .*?>//e
 " insert fake tags around the entire document.
 " This will permit us to pretty-format excerpts of
 " XML that may contain multiple top-level elements.
 0put ='<PrettyXML>'
 $put ='</PrettyXML>'
 silent %!xmllint --format -
 " xmllint will insert an <?xml?> header. it's easy enough to delete
 " if you don't want it.
 " delete the fake tags
 2d
 $d
 " restore the 'normal' indentation, which is one extra level
 " too deep due to the extra tags we wrapped around the document.
 silent %<
 " back to home
 1
 " restore the filetype
 exe "set ft=" . l:origft
endfunction
command! PrettyXML call DoPrettyXML()

" Manually added
set ts=4 expandtab
syntax on
highlight Comment ctermfg=grey
